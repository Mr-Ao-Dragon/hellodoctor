edition: 3.0.0
name: hellodoctor
access: default
resources:
  login:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: login
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 20
      memorySize: 128
      environmentVariables:
        AppId: ${env('AppId')}
        AppSecret: ${env('AppSecret')}
        AccessKeyId: ${env('AccessKeyId')}
        AccessKeySecret: ${env('AccessKeySecret')}
        LD_LIBRARY_PATH: >-
          /code:/code/lib:/usr/local/lib:/opt/lib
        EndPoint: ${env('EndPoint')}
      handler: login
      diskSize: 512
      code: target/login
      logConfig: auto
      triggers:
        - triggerConfig:
            methods:
              - GET
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: ''
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/login user/login/main.go
          path: ./
        - run: chmod a+x login
          path: ./target
  perm:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: perm
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 20
      memorySize: 128
      environmentVariables:
        AppId: ${env('AppId')}
        AppSecret: ${env('AppSecret')}
        AccessKeyId: ${env('AccessKeyId')}
        AccessKeySecret: ${env('AccessKeySecret')}
        LD_LIBRARY_PATH: >-
          /code:/code/lib:/usr/local/lib:/opt/lib
        EndPoint: ${env('EndPoint')}

      handler: perm
      diskSize: 512
      code: target/perm
      logConfig: auto
      triggers:
        - triggerConfig:
            methods:
              - POST
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: ''
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/perm user/admin/perm/main.go
          path: ./
        - run: chmod a+x perm
          path: ./target
  verify:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: verify
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 20
      memorySize: 128
      environmentVariables:
        Token: ${env('token')}
      handler: verify
      diskSize: 512
      code: target/verify
      logConfig: auto
      triggers:
        - triggerConfig:
            methods:
              - GET
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: ''
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags='-s -w' -o=target/verify verify/main.go
          path: ./
        - run: chmod a+x verify
          path: ./target
  RUVerify:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: RUVerify
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 200
      memorySize: 128
      environmentVariables:
        RUVerify: ${env('RUVerify')}
      handler: RUVerify
      diskSize: 512
      code: target/RUVerify
      logConfig: auto
      triggers:
        - triggerConfig:
            methods:
              - GET
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: ''
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags='-s -w' -o=target/RUVerify redirectUri/main.go
          path: ./
        - run: chmod a+x RUVerify
          path: ./target
  doctor-list:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: doctor-list
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 20
      memorySize: 128
      environmentVariables:
        AccessKeyId: ${env('AccessKeyId')}
        LD_LIBRARY_PATH: >-
          /code:/code/lib:/usr/local/lib:/opt/lib
        AccessKeySecret: ${env('AccessKeySecret')}
        EndPoint: ${env('EndPoint')}
      handler: doctor-list
      diskSize: 512
      code: target/doctor-list
      logConfig: auto
      triggers:
        - triggerConfig:
            methods:
              - GET
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: ''
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/doctor-list index/doctor-list/main.go
          path: ./
        - run: chmod a+x doctor-list
          path: ./target
  doctor-one-info:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: doctor-one-info
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 20
      memorySize: 128
      environmentVariables:
        AppId: ${env('AppId')}
        AccessKeyId: ${env('AccessKeyId')}
        LD_LIBRARY_PATH: >-
          /code:/code/lib:/usr/local/lib:/opt/lib
        AccessKeySecret: ${env('AccessKeySecret')}
        EndPoint: ${env('EndPoint')}
        AppSecret: ${env('AppSecret')}
      handler: doctor-one-info
      diskSize: 512
      code: target/doctor-one-info
      logConfig: auto
      triggers:
        - triggerConfig:
            methods:
              - POST
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: ''
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/doctor-one-info user/doctor/oneInfo/main.go
          path: ./
        - run: chmod a+x doctor-one-info
          path: ./target
  post-reverse:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: post-reverse
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 20
      memorySize: 128
      environmentVariables:
        AppId: ${env('AppId')}
        AccessKeyId: ${env('AccessKeyId')}
        LD_LIBRARY_PATH: >-
          /code:/code/lib:/usr/local/lib:/opt/lib
        AccessKeySecret: ${env('AccessKeySecret')}
        EndPoint: ${env('EndPoint')}
        AppSecret: ${env('AppSecret')}
      handler: post-reverse
      diskSize: 512
      code: target/post-reverse
      logConfig: auto
      triggers:
        - triggerConfig:
            methods:
              - POST
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: ''
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/post-reverse reserve/get/main.go
          path: ./
        - run: chmod a+x post-reverse
          path: ./target
  health-lag-http:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: health-lag-http
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 20
      memorySize: 128
      environmentVariables:
        AppId: ${env('AppId')}
        AccessKeyId: ${env('AccessKeyId')}
        LD_LIBRARY_PATH: >-
          /code:/code/lib:/usr/local/lib:/opt/lib
        AccessKeySecret: ${env('AccessKeySecret')}
        EndPoint: ${env('EndPoint')}
        AppSecret: ${env('AppSecret')}
      handler: health-lag-http
      diskSize: 512
      code: target/health-lag-http
      logConfig: auto
      triggers:
        - triggerConfig:
            methods:
              - GET
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: ''
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/health-lag-http health-check/lag/http/main.go
          path: ./
        - run: chmod a+x health-lag-http
          path: ./target
  get-reverse:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: get-reverse
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 20
      memorySize: 128
      environmentVariables:
        AppId: ${env('AppId')}
        AccessKeyId: ${env('AccessKeyId')}
        LD_LIBRARY_PATH: >-
          /code:/code/lib:/usr/local/lib:/opt/lib
        AccessKeySecret: ${env('AccessKeySecret')}
        EndPoint: ${env('EndPoint')}
        AppSecret: ${env('AppSecret')}
      handler: get-reverse
      diskSize: 512
      code: target/get-reverse
      logConfig: auto
      triggers:
        - triggerConfig:
            methods:
              - POST
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: '获取订单列表'
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/get-reverse reserve/get/main.go
          path: ./
        - run: chmod a+x get-reverse
          path: ./target
# http配置
  http-domain:
    component: fc3-domain
    props:
      region: ${env('region')}
      domainName: ${env('domain')}
      protocol: HTTPS
      routeConfig:
        routes:
          - path: /v1/user/login
            functionName: login
            qualifier: LATEST
          - path: /v1/perm/set
            functionName: perm
            qualifier: LATEST
          - path: /v1/verify
            functionName: verify
            qualifier: LATEST
          - path: /v1/doctor/index/list
            functionName: doctor-list
            qualifier: LATEST
          - path: /v1/doctor/one_info
            functionName: doctor-one-info
            qualifier: LATEST
          - path: /v1/rese/new
            functionName: post-reverse
            qualifier: LATEST
          - path: /v1/rese/list
            functionName: get-reverse
            qualifier: LATEST
          - path: /v1/health/lag
            functionName: health-lag-http
            qualifier: LATEST
#          - path: /MP_verify_*
#            functionName: RUVerify
#            qualifier: LATEST
          - path: /MP_verify_${env('MPTxtPath')}.txt
            functionName: RUVerify
            qualifier: LATEST
      wafConfig:
        enableWAF: false
      tlsConfig:
        minVersion: TLSv1.2
        cipherSuites:
          - TLS_RSA_WITH_AES_128_CBC_SHA
          - TLS_RSA_WITH_AES_256_CBC_SHA
          - TLS_RSA_WITH_AES_128_GCM_SHA256
          - TLS_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
          - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
          - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - TLS_RSA_WITH_RC4_128_SHA
          - TLS_RSA_WITH_3DES_EDE_CBC_SHA
          - TLS_RSA_WITH_AES_128_CBC_SHA256
          - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
          - TLS_ECDHE_RSA_WITH_RC4_128_SHA
          - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        maxVersion: TLSv1.3
      certConfig:
        certId: ${env('certId')}
      authConfig:
        authType: anonymous