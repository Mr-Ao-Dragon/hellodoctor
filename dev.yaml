edition: 3.0.0
name: hellodoctor
access: default
resources:
  login:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: login
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 20
      memorySize: 128
      environmentVariables:
        AppId: ${env('AppId')}
        AccessKeyId: ${env('AccessKeyId')}
        LD_LIBRARY_PATH: >-
          /code:/code/lib:/usr/local/lib:/opt/lib
        AccessKeySecret: ${env('AccessKeySecret')}
        EndPoint: ${env('EndPoint')}
        AppSecret: ${env('AppSecret')}
      handler: login
      diskSize: 512
      code: target/login
      triggers:
        - triggerConfig:
            methods:
              - GET
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: ''
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: bash -c "source /root/.gvm/scripts/gvm && gvm install go1.21.7 && gvm use go1.21.7 && go mod vendor && GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/login user/login/main.go"
#         - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/login user/login/main.go
          path: ./
        - run: chmod a+x login
          path: ./target
  login-domain:
    component: fc3-domain
    props:
      region: ${env('region')}
      domainName: ${env('domain')}
      protocol: HTTPS
      routeConfig:
        routes:
          - path: /v1/user/login
            functionName: login
            qualifier: LATEST
      wafConfig:
        enableWAF: false
      tlsConfig:
        minVersion: TLSv1.2
        cipherSuites:
          - TLS_RSA_WITH_AES_128_CBC_SHA
          - TLS_RSA_WITH_AES_256_CBC_SHA
          - TLS_RSA_WITH_AES_128_GCM_SHA256
          - TLS_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
          - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
          - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - TLS_RSA_WITH_RC4_128_SHA
          - TLS_RSA_WITH_3DES_EDE_CBC_SHA
          - TLS_RSA_WITH_AES_128_CBC_SHA256
          - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
          - TLS_ECDHE_RSA_WITH_RC4_128_SHA
          - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        maxVersion: TLSv1.3
      certConfig:
        certName: ${env('certName')}
        certificate: oss://${env('region')}/${env('certBucket')}/${env('certPem')}
        privateKey: oss://${env('region')}/${env('certBucket')}/${env('certKey')}
      authConfig:
        authType: anonymous
  perm:
    component: fc3
    props:
      region: ${env('region')}
      description: ''
      timeout: 60
      internetAccess: true
      functionName: perm
      runtime: go1
      cpu: 0.05
      instanceConcurrency: 20
      memorySize: 128
      environmentVariables:
        AppId: ${env('AppId')}
        AccessKeyId: ${env('AccessKeyId')}
        LD_LIBRARY_PATH: >-
          /code:/code/lib:/usr/local/lib:/opt/lib
        AccessKeySecret: ${env('AccessKeySecret')}
        EndPoint: ${env('EndPoint')}
        AppSecret: ${env('AppSecret')}
      handler: perm
      diskSize: 512
      code: target/perm
      triggers:
        - triggerConfig:
            methods:
              - POST
            authType: anonymous
            disableURLInternet: false
          triggerName: defaultTrigger
          description: ''
          qualifier: LATEST
          triggerType: http
    actions:
      pre-deploy:
        - run: mkdir -p target
          path: ./
        - run: bash -c "source /root/.gvm/scripts/gvm && gvm install go1.21.7 && gvm use go1.21.7 && go mod vendor && GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/perm user/admin/perm/main.go"
          path: ./
        - run: chmod a+x perm
          path: ./target
  perm-domain:
    component: fc3-domain
    props:
      region: ${env('region')}
      domainName: ${env('domain')}
      protocol: HTTPS
      routeConfig:
        routes:
          - path: /v1/perm/set
            functionName: perm
            qualifier: LATEST
      wafConfig:
        enableWAF: false
      tlsConfig:
        minVersion: TLSv1.2
        cipherSuites:
          - TLS_RSA_WITH_AES_128_CBC_SHA
          - TLS_RSA_WITH_AES_256_CBC_SHA
          - TLS_RSA_WITH_AES_128_GCM_SHA256
          - TLS_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
          - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
          - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - TLS_RSA_WITH_RC4_128_SHA
          - TLS_RSA_WITH_3DES_EDE_CBC_SHA
          - TLS_RSA_WITH_AES_128_CBC_SHA256
          - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
          - TLS_ECDHE_RSA_WITH_RC4_128_SHA
          - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
          - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        maxVersion: TLSv1.3
      certConfig:
        certName: ${env('certName')}
        certificate: oss://${env('region')}/${env('certBucket')}/${env('certPem')}
        privateKey: oss://${env('region')}/${env('certBucket')}/${env('certKey')}
      authConfig:
        authType: anonymous
    verify:
      component: fc3
      props:
        region: ${env('region')}
        description: ''
        timeout: 60
        internetAccess: true
        functionName: verify
        runtime: go1
        cpu: 0.05
        instanceConcurrency: 20
        memorySize: 128
        environmentVariables:
          AppId: ${env('AppId')}
          AccessKeyId: ${env('AccessKeyId')}
          LD_LIBRARY_PATH: >-
            /code:/code/lib:/usr/local/lib:/opt/lib
          AccessKeySecret: ${env('AccessKeySecret')}
          EndPoint: ${env('EndPoint')}
          AppSecret: ${env('AppSecret')}
        handler: verify
        diskSize: 512
        code: target/verify
        triggers:
          - triggerConfig:
              methods:
                - GET
              authType: anonymous
              disableURLInternet: false
            triggerName: defaultTrigger
            description: ''
            qualifier: LATEST
            triggerType: http
      actions:
        pre-deploy:
          - run: mkdir -p target
            path: ./
          - run: bash -c "source /root/.gvm/scripts/gvm && gvm install go1.21.7 && gvm use go1.21.7 && go mod vendor && GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/verify verify/main.go"
  #         - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/perm user/perm/main.go
            path: ./
          - run: chmod a+x verify
            path: ./target
    verify-domain:
      component: fc3-domain
      props:
        region: ${env('region')}
        domainName: ${env('domain')}
        protocol: HTTPS
        routeConfig:
          routes:
            - path: /v1/verify
              functionName: verify
              qualifier: LATEST
        wafConfig:
          enableWAF: false
        tlsConfig:
          minVersion: TLSv1.2
          cipherSuites:
            - TLS_RSA_WITH_AES_128_CBC_SHA
            - TLS_RSA_WITH_AES_256_CBC_SHA
            - TLS_RSA_WITH_AES_128_GCM_SHA256
            - TLS_RSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
            - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
            - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
            - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
            - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
            - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
            - TLS_RSA_WITH_RC4_128_SHA
            - TLS_RSA_WITH_3DES_EDE_CBC_SHA
            - TLS_RSA_WITH_AES_128_CBC_SHA256
            - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
            - TLS_ECDHE_RSA_WITH_RC4_128_SHA
            - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
            - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
            - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
          maxVersion: TLSv1.3
        certConfig:
          certName: ${env('certName')}
          certificate: oss://${env('region')}/${env('certBucket')}/${env('certPem')}
          privateKey: oss://${env('region')}/${env('certBucket')}/${env('certKey')}
        authConfig:
          authType: anonymous
    doctor-list:
      component: fc3
      props:
        region: ${env('region')}
        description: ''
        timeout: 60
        internetAccess: true
        functionName: doctor-list
        runtime: go1
        cpu: 0.05
        instanceConcurrency: 20
        memorySize: 128
        environmentVariables:
          AppId: ${env('AppId')}
          AccessKeyId: ${env('AccessKeyId')}
          LD_LIBRARY_PATH: >-
            /code:/code/lib:/usr/local/lib:/opt/lib
          AccessKeySecret: ${env('AccessKeySecret')}
          EndPoint: ${env('EndPoint')}
          AppSecret: ${env('AppSecret')}
        handler: doctor-list
        diskSize: 512
        code: target/doctor-list
        triggers:
          - triggerConfig:
              methods:
                - GET
              authType: anonymous
              disableURLInternet: false
            triggerName: defaultTrigger
            description: ''
            qualifier: LATEST
            triggerType: http
      actions:
        pre-deploy:
          - run: mkdir -p target
            path: ./
          - run: bash -c "source /root/.gvm/scripts/gvm && gvm install go1.21.7 && gvm use go1.21.7 && go mod vendor && GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/doctor-list index/doctor-list/main.go"
  #         - run: GO111MODULE=on CGO_ENABLED=0 GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-s -w' -o=target/perm user/perm/main.go
            path: ./
          - run: chmod a+x doctor-list
            path: ./target
    doctor-list-domain:
      component: fc3-domain
      props:
        region: ${env('region')}
        domainName: ${env('domain')}
        protocol: HTTPS
        routeConfig:
          routes:
            - path: /v1/doctor/index/list
              functionName: doctor-list
              qualifier: LATEST
        wafConfig:
          enableWAF: false
        tlsConfig:
          minVersion: TLSv1.2
          cipherSuites:
            - TLS_RSA_WITH_AES_128_CBC_SHA
            - TLS_RSA_WITH_AES_256_CBC_SHA
            - TLS_RSA_WITH_AES_128_GCM_SHA256
            - TLS_RSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
            - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
            - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
            - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
            - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
            - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
            - TLS_RSA_WITH_RC4_128_SHA
            - TLS_RSA_WITH_3DES_EDE_CBC_SHA
            - TLS_RSA_WITH_AES_128_CBC_SHA256
            - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
            - TLS_ECDHE_RSA_WITH_RC4_128_SHA
            - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
            - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
            - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
          maxVersion: TLSv1.3
        certConfig:
          certName: ${env('certName')}
          certificate: oss://${env('region')}/${env('certBucket')}/${env('certPem')}
          privateKey: oss://${env('region')}/${env('certBucket')}/${env('certKey')}
        authConfig:
          authType: anonymous